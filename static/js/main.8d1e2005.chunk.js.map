{"version":3,"sources":["components/common/City/City.module.css","components/common/Weather/Weather.module.css","App.module.css","components/common/Error/Error.module.css","components/common/Search/Search.module.css","api/api.ts","api/weather-api.ts","redux/weather-reducer.ts","redux/search-reducer.ts","redux/store.ts","redux/search-selector.ts","img/city.png","components/common/City/City.tsx","components/common/City/CityContainer.tsx","components/common/Error/Error.tsx","components/common/Search/Search.tsx","components/common/Search/SearchContainer.tsx","redux/weather-selector.ts","components/common/Weather/Weather.tsx","components/common/Weather/WeatherContainer.tsx","App.tsx","AppContainer.tsx","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","weatherApi","city","get","then","response","data","initialState","initializePropcess","isError","coord","lon","lat","weather","id","main","description","icon","base","temp","feels_like","temp_min","temp_max","pressure","humidity","visibility","wind","speed","deg","clouds","all","dt","sys","type","message","country","sunrise","sunset","timezone","name","cod","SET_WEATHER","SET_INITIALIZE_PROCESS","SET_IS_ERROR","actions","isInitialize","toggle","weatherReducer","state","action","SET_CITY","searchReducer","rootReducer","combineReducers","search","store","createStore","composeWithDevTools","applyMiddleware","thunk","selectCity","City","props","className","styles","img","src","alt","connect","Error","error","text","Search","onSubmit","handleSubmit","onSubmitCity","input","title","register","required","placeholder","dispatch","setCity","getWeather","getState","a","useForm","watch","selectTemp","Math","floor","selectDescription","selectError","Weather","App","app","content","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d1e2005.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"city\":\"City_city__iN0uu\",\"img\":\"City_img__3lhNb\",\"description\":\"City_description__M03Av\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather\":\"Weather_weather__1uvZR\",\"temp\":\"Weather_temp__M5qAO\",\"description\":\"Weather_description__dbaor\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"App_content__3La4L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Error_text__3BoTk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Search_input__1OL4h\"};","import axios from \"axios\";\n\nexport const instance = axios.create({\n    baseURL: \"https://api.openweathermap.org/data/2.5/\",\n});","import { InitialStateType } from \"../redux/weather-reducer\";\nimport { instance } from \"./api\";\n\nconst API_KEY = \"b5c165b4303d00a63f5d5dac48a3f800\";\n\ntype GetWeatherRespType = InitialStateType;\n\nexport const weatherApi = {\n  getWeather(city: string) {\n    return instance\n      .get<GetWeatherRespType>(`weather?q=${city}&appid=${API_KEY}`)\n      .then((response) => response.data);\n  },\n};\n","// Types\n\nimport { ThunkAction } from \"redux-thunk\";\nimport { weatherApi } from \"../api/weather-api\";\nimport { InferValueType, StateType } from \"./store\";\n\nexport type InitialStateType = typeof initialState;\n\nexport type WeatherActionsType = ReturnType<InferValueType<typeof actions>>;\n\n// State\n\nconst initialState = {\n  initializePropcess: false,\n  isError: false,\n  coord: {\n    lon: null,\n    lat: null,\n  },\n  weather: [\n    {\n      id: null,\n      main: null,\n      description: null,\n      icon: null,\n    },\n  ],\n  base: null,\n  main: {\n    temp: null,\n    feels_like: null,\n    temp_min: null,\n    temp_max: null,\n    pressure: null,\n    humidity: null,\n  },\n  visibility: null,\n  wind: {\n    speed: null,\n    deg: null,\n  },\n  clouds: {\n    all: null,\n  },\n  dt: null,\n  sys: {\n    type: null,\n    id: null,\n    message: null,\n    country: null,\n    sunrise: null,\n    sunset: null,\n  },\n  timezone: null,\n  id: null,\n  name: null,\n  cod: null,\n};\n\n// Actions\n\nconst SET_WEATHER = \"weather/weather/GET_WEATHER\";\nconst SET_INITIALIZE_PROCESS = \"weather/weather/SET_INITIALIZE_PROCESS\";\nconst SET_IS_ERROR = \"weather/weather/SET_IS_ERROR\";\n\n// Action Creators\n\nconst actions = {\n  setWeather: (data: InitialStateType) =>\n    ({ type: SET_WEATHER, data } as const),\n  setInitializePropcess: (isInitialize: boolean) =>\n    ({ type: SET_INITIALIZE_PROCESS, isInitialize } as const),\n  setIsError: (toggle: boolean) => ({ type: SET_IS_ERROR, toggle } as const),\n};\n\n// Reducer\n\nconst weatherReducer = (\n  state: InitialStateType = initialState,\n  action: WeatherActionsType\n) => {\n  switch (action.type) {\n    case SET_IS_ERROR:\n      return {\n        ...state,\n        isError: action.toggle,\n      };\n    case SET_INITIALIZE_PROCESS:\n      return {\n        ...state,\n        initializePropcess: action.isInitialize,\n      };\n    case SET_WEATHER:\n      return {\n        ...action.data,\n      };\n    default:\n      return state;\n  }\n};\n\n// Thunks\n\nexport const getWeather = (\n  city: string\n): ThunkAction<Promise<void>, StateType, unknown, WeatherActionsType> => {\n  return async (dispatch, getState) => {\n    if (!getState().weather.initializePropcess) {\n      dispatch(actions.setInitializePropcess(true));\n      dispatch(actions.setIsError(false));\n      try {\n        const response = await weatherApi.getWeather(city);\n        if (response.cod === 200) {\n          dispatch(actions.setWeather(response));\n        }\n      } catch (e) {\n        dispatch(actions.setIsError(true));\n      }\n      dispatch(actions.setInitializePropcess(false));\n    }\n  };\n};\n\nexport default weatherReducer;\n","// Types\n\nimport { InferValueType } from \"./store\";\n\ntype InitialStateType = typeof initialState;\n\nexport type SearchActionsType = ReturnType<InferValueType<typeof actions>>;\n\n// Actions\n\nconst SET_CITY = \"weather/search/SET_CITY\";\n\n// Action Creators\n\nexport const actions = {\n    setCity: (city: string) => ({ type: SET_CITY, city } as const),\n}\n\nconst initialState = {\n    city: null as string | null\n}\n\nconst searchReducer = (state: InitialStateType = initialState, action: SearchActionsType) => {\n    switch (action.type) {\n        case SET_CITY:\n            return {\n                ...state,\n                city: action.city,\n            }\n        default:\n            return state;\n    }\n}\n\nexport default searchReducer;","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport weatherReducer from \"./weather-reducer\";\nimport searchReducer from \"./search-reducer\";\n\nexport type InferValueType<T> = T extends {[key: string]: infer U} ? U : never;\n\nexport type StateType = ReturnType<typeof rootReducer>;\n\nconst rootReducer = combineReducers({\n    weather: weatherReducer,\n    search: searchReducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import { StateType } from \"./store\"\n\nexport const selectCity = (state: StateType) => {\n    return state.search.city;\n}","export default __webpack_public_path__ + \"static/media/city.b795da1c.png\";","import React from 'react'\nimport styles from \"./City.module.css\";\nimport img from \"../../../img/city.png\";\n\ntype PropsType = {\n    city: string;\n}\n\nconst City: React.FC<PropsType> = (props) => {\n    return (\n        <div className={styles.city}>\n            <img className={styles.img} src={img} alt=\"city\" />\n            <p className={styles.description}>{props.city}</p>\n        </div>\n    )\n}\n\nexport default City\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { selectCity } from \"../../../redux/search-selector\";\nimport { StateType } from \"../../../redux/store\";\nimport City from \"./City\";\n\n// Types\n\ntype PropsType = {\n  city: string | null;\n};\n\ntype MapDispatchType = {};\n\ntype OwnProps = {};\n\n// Component\n\nconst CityContainer: React.FC<PropsType> = (props) => {\n  return <>{props.city && <City city={props.city} />}</>;\n};\n\nconst mapStateToProps = (state: StateType) => ({\n  city: selectCity(state),\n});\n\nexport default connect<PropsType, MapDispatchType, OwnProps, StateType>(\n  mapStateToProps,\n  {}\n)(CityContainer);\n","import React from 'react'\nimport styles from \"./Error.module.css\";\n\nconst Error: React.FC = () => {\n    return (\n        <div className={styles.error}>\n            <p className={styles.text}>...something went wrong</p>\n        </div>\n    )\n}\n\nexport default Error\n","import React from \"react\";\nimport styles from \"./Search.module.css\";\n\n// Types\n\ntype PropsType = {\n  register: any;\n  handleSubmit: any;\n  onSubmitCity: any;\n}\n\n// Component\n\nconst Search: React.FC<PropsType> = (props) => {\n\n  return (\n    <form className={styles.search} onSubmit={props.handleSubmit(props.onSubmitCity)}>\n        <input\n          className={styles.input}\n          type=\"text\"\n          title=\"city\"\n          {...props.register(\"search\", {required: true})}\n          placeholder=\"city\"\n        />\n    </form>\n  );\n};\nexport default Search;","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { actions, SearchActionsType } from \"../../../redux/search-reducer\";\nimport { StateType } from \"../../../redux/store\";\nimport { getWeather, WeatherActionsType } from \"../../../redux/weather-reducer\";\nimport Search from \"./Search\";\n\n// Types\n\ntype MapStateType = {};\n\ntype MapDispatchType = {\n  setCity: (city: string) => void;\n  getWeather: (city: string) => void;\n};\n\ntype OwnType = {};\n\ntype PropsType = MapStateType & MapDispatchType & OwnType;\n\n// Component\n\nconst SearchContainer: React.FC<PropsType> = (props) => {\n  const { register, handleSubmit, watch } = useForm();\n\n  const onSubmitCity = () => {\n    props.setCity(watch(\"search\"));\n    props.getWeather(watch(\"search\"));\n  };\n\n  return <Search register={register} handleSubmit={handleSubmit} onSubmitCity={onSubmitCity}/>;\n};\nconst mapDispatchToProps = (\n  dispatch: Dispatch<SearchActionsType> &\n    ThunkDispatch<StateType, {}, WeatherActionsType>\n) => ({\n  setCity: (city: string) => {\n    dispatch(actions.setCity(city));\n  },\n  getWeather: (city: string) => {\n    dispatch(getWeather(city));\n  },\n});\n\nexport default connect<MapStateType, MapDispatchType, OwnType>(\n  null,\n  mapDispatchToProps\n)(SearchContainer);\n","import { StateType } from \"./store\";\n\nexport const selectTemp = (state: StateType) => {\n    if (state.weather.main.temp) {\n        return Math.floor(state.weather.main.temp - 273);\n    } else {\n        return 0;\n    }\n}\n\nexport const selectDescription = (state: StateType) => {\n    return state.weather.weather[0].description;\n}\n\nexport const selectError = (state: StateType) => {\n    return state.weather.isError;\n}","import React from \"react\";\nimport styles from \"./Weather.module.css\";\n\ntype PropsType = {\n  temp: number;\n  description: string;\n};\n\nconst Weather: React.FC<PropsType> = (props) => {\n  return (\n    <div className={styles.weather}>\n        <p className={styles.temp}>{`${props.temp}ºC`}</p>\n        <p className={styles.description}>{props.description}</p>\n    </div>\n  );\n};\n\nexport default Weather;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { selectCity } from \"../../../redux/search-selector\";\nimport { StateType } from \"../../../redux/store\";\nimport { selectDescription, selectTemp } from \"../../../redux/weather-selector\";\nimport Weather from \"./Weather\";\n\n// Types\n\ntype MapStateType = {\n  city: string | null;\n  temp: number | null;\n  description: string | null;\n};\n\ntype MapDispatchType = {};\n\ntype OwnType = {};\n\ntype PropsType = MapStateType & MapDispatchType & OwnType;\n\n// Component\n\nconst WeatherContainer: React.FC<PropsType> = (props) => {\n  return (\n    <>\n      {props.city && props.temp && props.description && (\n        <Weather temp={props.temp} description={props.description}/>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: StateType) => ({\n  city: selectCity(state),\n  temp: selectTemp(state),\n  description: selectDescription(state),\n});\n\nexport default connect<MapStateType, MapDispatchType, OwnType, StateType>(\n  mapStateToProps,\n  {}\n)(WeatherContainer);\n","import styles from \"./App.module.css\";\nimport CityContainer from \"./components/common/City/CityContainer\";\nimport Error from \"./components/common/Error/Error\";\nimport SearchContainer from \"./components/common/Search/SearchContainer\";\nimport WeatherContainer from \"./components/common/Weather/WeatherContainer\";\n\n// Types\n\ntype Mstp = {\n  isError: boolean;\n};\n\n// Component\n\nconst App: React.FC<Mstp> = (props) => {\n  return (\n    <div className={styles.app}>\n      <div className=\"container\">\n        <div className={styles.content}>\n          <SearchContainer />\n          {props.isError ? (\n            <Error />\n          ) : (\n            <>\n              <WeatherContainer />\n              <CityContainer />\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport App from './App'\nimport { StateType } from './redux/store'\nimport { selectError } from './redux/weather-selector'\n\n// Types\n\ntype Mstp = {\n    isError: boolean\n}\n\n// Component\n\nconst AppContainer: React.FC<Mstp> = (props) => {\n    return <App isError={props.isError} />\n}\n\nconst mapStateToProps = (state: StateType) => ({\n    isError: selectError(state),\n});\n\nexport default connect<Mstp, {}, {}, StateType>(mapStateToProps, {})(AppContainer);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport AppContainer from \"./AppContainer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}